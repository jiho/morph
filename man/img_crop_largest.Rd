% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/img_crop_largest.R
\name{img_crop_largest}
\alias{img_crop_largest}
\title{Crop the largest object from an image and save it}
\usage{
img_crop_largest(in_path, out_path, top = 0, right = 0, bottom = 0,
  left = 0, threshold = 0)
}
\arguments{
\item{in_path}{path to the input image file.}

\item{out_path}{path to the file where the result of the crop should be stored.}

\item{top, right, bottom, left}{number of pixels to crop from each side of the image.}

\item{threshold}{threshold to detect the object from the background. Images are inverted when read and the input grey levels are scaled from 0 (black) to 1 (white). Threshold values should therefore be in [0,1] and typically around 2/255, to remove almost pure black backgrounds.}
}
\value{
Nothing.
}
\description{
Crop the largest object from an image and save it
}
\examples{
# get an input images with lots of whitespace and a legend
input  <- system.file("extdata", "16195419.jpg", package="morphr")
io <- reticulate::import("skimage.io", as="io")
input_img <- io$imread(input, as_gray=TRUE)*255
imshow(input_img)

# crop and input image to its largest object
output <- tempfile(fileext=".jpg")
dir.create(dirname(output), showWarnings=FALSE)
img_crop_largest(input, output, bottom=31, threshold=2/255)

# read and show the result
output_img <- io$imread(output, as_gray=TRUE)
imshow(output_img)
}
